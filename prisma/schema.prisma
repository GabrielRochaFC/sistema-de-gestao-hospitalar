// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  PATIENT
  PROFESSIONAL
}

enum ProfessionalType {
  DOCTOR
  NURSE
  TECHNICIAN
}

enum MedicalSpecialty {
  GENERAL_PRACTICE
  CARDIOLOGY
  DERMATOLOGY
  EMERGENCY_MEDICINE
  FAMILY_MEDICINE
  INTERNAL_MEDICINE
  NEUROLOGY
  OBSTETRICS_GYNECOLOGY
  ONCOLOGY
  ORTHOPEDICS
  PEDIATRICS
  PSYCHIATRY
  RADIOLOGY
  SURGERY
  UROLOGY
}

enum AppointmentStatus {
  SCHEDULED
  COMPLETED
  CANCELED
  NO_SHOW
}

enum AppointmentType {
  IN_PERSON
  TELEMEDICINE
}

enum BedStatus {
  AVAILABLE
  OCCUPIED
  MAINTENANCE
}

enum UnitType {
  HOSPITAL
  CLINIC
  LABORATORY
  HOME_CARE
}

enum AdmissionStatus {
  ACTIVE
  DISCHARGED
  CANCELED
}

enum ExamStatus {
  REQUESTED
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELED
}

enum ExamType {
  BLOOD_TEST
  URINE_TEST
  IMAGING
  XRAY
  MRI
  CT
  ULTRASOUND
  ECG
  BIOPSY
  OTHER
}

model User {
  id        String    @id @default(uuid())
  email     String    @unique
  password  String
  firstName String
  lastName  String
  cpf       String    @unique
  phone     String?
  birthDate DateTime?
  status    Boolean   @default(true)

  role Role[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  patient      Patient?
  professional Professional?

  @@map("users")
}

model Patient {
  id               String   @id @default(uuid())
  address          Address?
  healthPlan       String?
  allergies        String[]
  bloodType        String?
  emergencyContact String?

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  appointments Appointment[]
  admissions   Admission[]
  exams        Exam[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("patients")
}

model Professional {
  id            String             @id @default(uuid())
  licenseNumber String?            @unique
  type          ProfessionalType   @default(DOCTOR)
  specialties   MedicalSpecialty[]

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  appointments Appointment[]
  units        HospitalUnit[]
  exams        Exam[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("professionals")
}

model Appointment {
  id              String            @id @default(uuid())
  dateTime        DateTime
  status          AppointmentStatus @default(SCHEDULED)
  type            AppointmentType   @default(IN_PERSON)
  telemedicineUrl String?
  notes           String?

  patient   Patient @relation(fields: [patientId], references: [id])
  patientId String

  professional   Professional @relation(fields: [professionalId], references: [id])
  professionalId String

  unit   HospitalUnit @relation(fields: [unitId], references: [id])
  unitId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("appointments")
}

model Address {
  id         String  @id @default(uuid())
  street     String
  number     String?
  complement String?
  city       String
  state      String
  zipCode    String
  country    String?

  patient   Patient? @relation(fields: [patientId], references: [id])
  patientId String?  @unique
}

model HospitalUnit {
  id    Int      @id @default(autoincrement())
  name  String
  type  UnitType
  phone String?

  professionals Professional[]
  beds          Bed[]
  appointments  Appointment[]
  admissions    Admission[]
  exams         Exam[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("hospital_units")
}

model Bed {
  id     String    @id @default(uuid())
  code   String    @unique
  status BedStatus @default(AVAILABLE)

  unit   HospitalUnit @relation(fields: [unitId], references: [id])
  unitId Int

  deletedAt DateTime?

  admissions Admission[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("beds")
}

model Admission {
  id        String          @id @default(uuid())
  reason    String
  startDate DateTime        @default(now())
  endDate   DateTime?
  status    AdmissionStatus @default(ACTIVE)

  patient   Patient @relation(fields: [patientId], references: [id])
  patientId String

  bed   Bed    @relation(fields: [bedId], references: [id])
  bedId String

  unit   HospitalUnit @relation(fields: [unitId], references: [id])
  unitId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([status])
  @@index([patientId])
  @@index([unitId])
  @@map("admissions")
}

model Exam {
  id            String     @id @default(uuid())
  type          ExamType
  status        ExamStatus @default(REQUESTED)
  requestDate   DateTime   @default(now())
  scheduledDate DateTime?
  completedDate DateTime?
  resultText    String?
  notes         String?

  patient   Patient @relation(fields: [patientId], references: [id])
  patientId String

  professional   Professional? @relation(fields: [professionalId], references: [id])
  professionalId String?

  unit   HospitalUnit @relation(fields: [unitId], references: [id])
  unitId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([status])
  @@index([patientId])
  @@index([unitId])
  @@index([type])
  @@map("exams")
}
